stages:
  - build
  - bundle

.win_build_template: &win_build_definition
  stage: build
  script:
    - if not exist "build" mkdir build
    - if not exist "ide" mkdir ide
    - cd build
    - echo set -x; export PATH=`cygpath -u %QTDIR%/bin`:$PATH; qmake "CONFIG+=bundled" "DEFINES+=MINIZINC_IDE_BUILD=\\\\\\\"\"${CI_PIPELINE_ID}\\\\\\\"\"" ../MiniZincIDE/MiniZincIDE.pro; nmake > build.sh
    - d2u build.sh
    - bash build.sh
    - cp release/MiniZincIDE.exe ../ide
    - cd ../ide
    - if not exist "platforms" mkdir platforms
    - cp %QTDIR%/bin/Qt5Core.dll .
    - cp %QTDIR%/bin/Qt5Gui.dll .
    - cp %QTDIR%/bin/Qt5Multimedia.dll .
    - cp %QTDIR%/bin/Qt5MultimediaWidgets.dll .
    - cp %QTDIR%/bin/Qt5Network.dll .
    - cp %QTDIR%/bin/Qt5OpenGL.dll .
    - cp %QTDIR%/bin/Qt5Positioning.dll .
    - cp %QTDIR%/bin/Qt5PrintSupport.dll .
    - cp %QTDIR%/bin/Qt5Qml.dll .
    - cp %QTDIR%/bin/Qt5Quick.dll .
    - cp %QTDIR%/bin/Qt5Sensors.dll .
    - cp %QTDIR%/bin/Qt5Sql.dll .
    - cp %QTDIR%/bin/Qt5WebChannel.dll .
    - cp %QTDIR%/bin/Qt5WebSockets.dll .
    - cp %QTDIR%/bin/Qt5WebEngine.dll .
    - cp %QTDIR%/bin/Qt5WebEngineWidgets.dll .
    - cp %QTDIR%/bin/Qt5WebView.dll .
    - cp %QTDIR%/bin/Qt5WebEngineCore.dll .
    - cp %QTDIR%/bin/Qt5Widgets.dll .
    - cp %QTDIR%/bin/QtWebEngineProcess.exe .
    - cp %QTDIR%/resources/qtwebengine_resources*.pak .
    - cp %QTDIR%/resources/icudtl.dat .
    - cp %QTDIR%/plugins/platforms/qwindows.dll ./platforms
  artifacts:
    paths:
      - ide/


build:linux:
  stage: build
  image: dekker1/qt:latest
  script:
    - mkdir -p build; cd build
    - qmake -makefile "CONFIG+=bundled" "DEFINES+=MINIZINC_IDE_BUILD=\\\\\\\"\"${CI_PIPELINE_ID}\\\\\\\"\"" ../MiniZincIDE/MiniZincIDE.pro
    - make -j4
    - mkdir -p ../ide/{bin,lib}; cd ../ide
    - cp ../build/MiniZincIDE bin/
    - cp $QTDIR/{libQt5WebKitWidgets.so.5,libQt5Widgets.so.5,libQt5WebEngineWidgets.so.5,libQt5WebEngineCore.so.5,libQt5Gui.so.5,libQt5Network.so.5,libQt5Core.so.5,libQt5WebKit.so.5,libQt5PrintSupport.so.5,libQt5OpenGL.so.5,libQt5Quick.so.5,libQt5QuickWidgets.so.5,libQt5Qml.so.5,libQt5Sql.so.5,libQt5DBus.so.5,libQt5Svg.so.5,libQt5XcbQpa.so.5,libicui18n.so.55,libicuuc.so.55} $CI_PROJECT_DIR/ide/lib
    - cp -r $QTDIR/qt5/plugins $CI_PROJECT_DIR/ide/lib
  tags:
     - linux
     - docker
  artifacts:
    paths:
      - ide/
  cache:
    key: "linux_$CI_COMMIT_REF_SLUG"
    paths:
      - build/

build:osx:
  stage: build
  variables:
    QTDIR: "$OSXQTDIR"
  script:
    - export PATH="$QTDIR/bin:$PATH"
    - mkdir -p build; cd build
    - qmake -makefile "CONFIG+=bundled" "DEFINES+=MINIZINC_IDE_BUILD=\\\\\\\"\"${CI_PIPELINE_ID}\\\\\\\"\"" ../MiniZincIDE/MiniZincIDE.pro
    - make -j4
    - cp -r MiniZincIDE.app ..
  tags:
     - osx
     - cpp
     - qt
  artifacts:
    paths:
      - MiniZincIDE.app
  cache:
    key: "osx_$CI_COMMIT_REF_SLUG"
    paths:
      - build/

.build:win32: #DISABLED
  <<: *win_build_definition
  variables:
    QTDIR: "$WINQTDIR"
  before_script:
    - call "C:\Program Files (x86)\Microsoft Visual Studio 14.0/VC/vcvarsall.bat"
  tags:
     - win32
     - cpp
     - qt
  cache:
    key: "win32_$CI_COMMIT_REF_SLUG"
    paths:
      - build/

build:win64:
  <<: *win_build_definition
  variables:
    QTDIR: "$WINQTDIR"
  before_script:
    - call "C:\Program Files (x86)\Microsoft Visual Studio 14.0/VC/vcvarsall.bat" amd64
  tags:
     - win64
     - cpp
     - qt
  cache:
    key: "win64_$CI_COMMIT_REF_SLUG"
    paths:
      - build/
